// For those who want the bleeding edge
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'

repositories {
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven { // McJtyLib
        url "https://maven.k-4u.nl"
    }
}

group = 'com.mcjty.wastify' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'wastify'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
//    mappings channel: 'parchment', version: "2022.06.05-1.18.2"
    mappings channel: 'official', version: "1.19.2"
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run').canonicalPath
            args '--mod', 'wastify', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')
            source sourceSets.main
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-1.19-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-1.19-forge-api:${jei_version}")
    // at runtime, use the full JEI jar for Forge
    runtimeOnly fg.deobf("mezz.jei:jei-1.19-forge:${jei_version}")

    if (findProject(':TheOneProbe') != null) {
        implementation project(':TheOneProbe')
    } else {
        implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:theoneprobe:${top_version}") {
            transitive = false
        })
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "wastify",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${modname} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

tasks.curseforge.enabled = project.hasProperty('curseforge_key')

curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    project {
        id = project.projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = project.curse_type
        addGameVersion project.minecraft_version
        mainArtifact(jar) {
            displayName = "${modname} - ${version}"
        }
        relations {
            optionalLibrary 'the-one-probe'
        }
    }
}

publishing {
    publications.create('mavenJava', MavenPublication) {
        from components.java

        artifactId = project.archivesBaseName
        pom {
            name = 'Wastify'
            description = 'Wastify the world!'
            scm {
                url = 'https://github.com/McJtyMods/Wastify'
                connection = 'scm:git:git@github.com:McJtyMods/Wastify.git'
                developerConnection = 'scm:git:git@github.com:McJtyMods/Wastify.git'
            }
            issueManagement {
                system = 'github'
                url = 'https://github.com/McJtyMods/Wastify/issues'
            }
            licenses {
                license {
                    name = 'MIT'
                    distribution = 'repo'
                }
            }
            developers {
                developer {
                    id = 'McJty'
                    name = 'McJty'
                    roles = ['developer']
                }
            }
        }
    }
    repositories {
        if (System.getenv('local_maven') != null) {
            maven {
                name = 'local'
                url = 'file://' + System.getenv('local_maven')
            }
        }
    }
}

